#!/bin/sh
#
# Copyright (c) alphaOS
# Written by simargl <archpup-at-gmail-dot-com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# 20170416 saintless - adapted for Retro-Debian. Depends on menu package, some code changes like WHERETO=/live,
# -ano option, message colors and some bashism removed. Warning - not suitable for use in AlphaOS anymore!

if [ "$(whoami)" != "root" ]; then
echo "You have to run this script as Superuser!"
exit
fi

if ! which update-menus; then
echo "update-menus command is missing."
echo "install menu package first:"
echo "sudo apt-get install menu"
exit
fi

if [ "$1" = "" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
echo "This script will load, unload squashfs module:"
echo " Loading:   bundle -a /path-to-module"
echo " Unloading: bundle -d /path-to-module"
exit
fi

WHERETO=/live
NUM=$(blkid -o full -c /dev/null | grep "squashfs" | grep -c "/live/\|(in use)")

ext=${2##*.}
echo "$ext"

POSITION="$((${NUM} + 1))"

check_bundle_defined () {
  if [ ! "$BUNDLE" ]; then
    echo " Please define bundle name."
    exit
  fi
}

get_bundle_load_positon () {
  if [ ! "$BUNDLE_POSITION" ]; then
    POSITION="1"
  else
    POSITION=$(echo "$BUNDLE_POSITION" | sed 's|^--||g')
  fi
}

check_if_onaufs () {
 APPDIR=$(dirname "$BUNDLE")
 ALINE=$(df -m "$APPDIR"|tail -n1| tr -s ' ')
 MYPLACE=$(echo "$ALINE"| cut -d' ' -f1)
 APPDEV=$(echo "$MYPLACE"| grep '^/dev/')
 
 if [ -z "$APPDEV" ]; then
echo "$BUNDLE" must be on an actual drive storage like /media/sda1 etc.
exit
fi
}

check_if_exists () {
  if [ ! -f "$BUNDLE" ]; then
    echo Module "$BUNDLE" does not exist.
    exit
  fi
}

check_if_deactivated () {
  if [ -d "$WHERETO/$BUNDLE" ]; then
    echo "$BUNDLE" is already activated.
    exit
  fi
}

check_if_activated () {
  if [ ! -d "$WHERETO/$BUNDLE" ]; then
    echo "$BUNDLE" is not yet activated.
    exit
  fi
}

post_actions_check_if_needed () {
  MODULES=$(ls "$WHERETO"/"$BUNDLE"/lib/modules 2>/dev/null)
  ICONS=$(ls "$WHERETO"/"$BUNDLE"/usr/share/icons/hicolor 2>/dev/null)
  DESKTOP=$(ls "$WHERETO"/"$BUNDLE"/usr/share/applications 2>/dev/null)
  GSETTINGS=$(ls "$WHERETO"/"$BUNDLE"/usr/share/glib-2.0/schemas 2>/dev/null)
  FONTS=$(ls "$WHERETO"/"$BUNDLE"/usr/share/fonts/TTF 2>/dev/null)
}

post_actions_run_list () {
  if [ "$MODULES" ]; then 
    echo "Updating kernel modules."
    depmod -a
  fi
  if [ "$ICONS" ]; then 
    echo "Rebuilding the icon cache."
    gtk-update-icon-cache --force /usr/share/icons/hicolor 2>/dev/null
  fi
  if [ "$DESKTOP" ]; then
    echo "Updating mime cache."
    update-desktop-database 2>/dev/null
    rm -r "$HOME"/.cache 2>/dev/null
  fi
  if [ "$GSETTINGS" ]; then
    echo "Updating gsettings xml schema files"
    glib-compile-schemas /usr/share/glib-2.0/schemas 2>/dev/null
  fi
  if [ "$FONTS" ]; then
    echo "Updating font cache."
    fc-cache -f -s > /dev/null
    mkfontscale /usr/share/fonts/TTF
    mkfontdir /usr/share/fonts/TTF
  fi
}

bundle_activate () {
  check_if_onaufs
  check_bundle_defined
  echo
  if [ "$ext" = "sfs" ] || [ "$ext" = "pfs" ] || [ "$ext" = "xzm" ] || [ "$ext" = "sb" ]; then
  read -p "Not .squashfs extension. Maybe Debian incompatible module. Continue? (y/n)?" choose
case "$choose" in
  y|Y ) echo "Continue...";;
* ) exit 0;;
esac
fi
  check_if_exists
  check_if_deactivated
  # get_bundle_load_positon
  mkdir "$WHERETO"/"$BUNDLE"
  mount -o loop "$BUNDLE" "$WHERETO"/"$BUNDLE"
  mount -n -o remount,add:"$POSITION":$WHERETO/"$BUNDLE"=rr+wh aufs /
  if [ $? -eq 0 ]; then
    echo Module "$BUNDLE" activated.
    post_actions_check_if_needed
    post_actions_run_list
    update-menus
    exit
  else
    echo Module "$BUNDLE" activate failed.
    umount "$WHERETO"/"$BUNDLE"
    rmdir "$WHERETO"/"$BUNDLE"
    exit
  fi
}

bundle_deactivate () {
  check_bundle_defined
  check_if_activated
  post_actions_check_if_needed
  mount -t squashfs -n -o remount,del:"$WHERETO"/"$BUNDLE" aufs /
  umount "$WHERETO"/"$BUNDLE"
  rmdir "$WHERETO"/"$BUNDLE"
  if [ $? -eq 0 ]; then
    echo Module "$BUNDLE" deactivated.
    post_actions_run_list
    update-menus
    exit 0
else
echo "$BUNDLE" deactivate failed. Try to activate and deactivate again or reboot.
  fi
}

case "$1" in
  
  -a)
    BUNDLE="$2"
	case $BUNDLE in

	*.xzm|*.squashfs|*.sfs|*.sb|*.pfs)
    cd "$(dirname "$BUNDLE")"
    BUNDLE=$(basename "$2")
    POSITION=1
    bundle_activate
	;;
	*)
	echo "Invalid module file."
	exit
	;;
	esac
;;
  -d)
    BUNDLE="$2"
	case $BUNDLE in

	*.xzm|*.squashfs|*.sfs|*.sb|*.pfs)
    cd "$(dirname "$BUNDLE")"
    BUNDLE=$(basename "$2")
    cd "$(dirname "$BUNDLE")"
    bundle_deactivate 
 	;;
	*)
	echo "Invalid module file."
	exit
	;;
	esac
;;
esac
